<project name="jscribd" default="dist" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <!-- set global properties for this build -->
  <property name="src" location="src" />
  <property name="build" location="build" />
  <property name="dist" location="dist" />
  <property name="test" location="test" />
  <property name="doc" location="doc" /> 
  <tstamp />
  <property name="distjar" location="${dist}/lib/jscribd-${DSTAMP}.jar"/>
  <property name="docjar" location="${dist}/jscribd-${DSTAMP}-javadoc.jar"/>
  <property name="srcjar" location="${dist}/jscribd-${DSTAMP}-sources.jar"/>

  <path id="classpath.base">
    <!-- If you change any of these, update them in the maven task at the end of the file too -->
    <pathelement location="lib/commons-logging-1.1.1.jar" />
    <pathelement location="lib/httpclient-4.0.jar" />
    <pathelement location="lib/httpcore-4.0.1.jar" />
    <pathelement location="lib/httpcore-nio-4.0.1.jar" />
    <pathelement location="lib/httpmime-4.0.jar" />
    <pathelement location="lib/apache-mime4j-0.6.jar" />
    <pathelement location="lib/jcip-annotations-1.0.jar" />
  </path>
  <path id="classpath.test">
    <!-- If you change any of these, update them in the maven task at the end of the file too -->
    <pathelement location="lib/junit-4.8.1.jar" />
    <pathelement location="${build}" />
    <path refid="classpath.base" />
  </path>

  <target name="maven_init">
    <path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="maven-ant-tasks.classpath" />
    
    <!-- You can override the repo path by setting maven.repo.local on the ant cmdline -->
    <!-- eg -Dmaven.repo.local=$HOME/maven2repo -->
    <condition property="maven.repo.local" value="${maven.repo.local}" else="${basedir}/build/mvn-local-repo">
            <isset property="maven.repo.local"/>
    </condition>
    <echo>maven.repo.local=${maven.repo.local}</echo>
    
    <artifact:localRepository id="local.repository" path="${maven.repo.local}" layout="default"/>
    <!-- Keep these in sync with the classpath definitions. Ideally, we'd be using Maven to
         download and manage dependencies instead of keeping them in lib/ under revision control,
         but this approach minimizes impact on the build. -->
    <artifact:pom id="maven.project" groupId="com.scribd" artifactId="jscribd" version="1.0" name="JScribd">
      <license name="MIT" url="https://github.com/mikwat/jscribd/blob/master/LICENSE"/>
      <dependency groupId="junit" artifactId="junit" version="4.8.1" scope="test"/>
      <dependency groupId="org.apache.james" artifactId="apache-mime4j" version="0.6"/>
      <dependency groupId="org.apache.httpcomponents" artifactId="httpclient" version="4.0"/>
      <dependency groupId="org.apache.httpcomponents" artifactId="httpmime" version="4.0"/>
      <dependency groupId="org.apache.httpcomponents" artifactId="httpcore-nio" version="4.0.1"/>
      <dependency groupId="commons-logging" artifactId="commons-logging" version="1.1.1"/>
      <dependency groupId="net.jcip" artifactId="jcip-annotations" version="1.0"/>
    </artifact:pom>
  </target>

  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}" />
  </target>

  <target name="compile" depends="init" description="compile the source">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" includeantruntime="false">
      <classpath refid="classpath.base" />
    </javac>
  </target>

  <target name="compile-debug" depends="init" description="compile the source with debug flags">
    <!-- Compile the java code from ${src} into ${build} with debug flags -->
    <javac srcdir="${src}" destdir="${build}" debug="on" debuglevel="lines,vars,source"  includeantruntime="false">
      <classpath refid="classpath.base" />
	</javac>
  </target>

  <target name="compile-tests" depends="compile-debug" description="compile the test sources">
    <!-- Compile the java code from ${test} into ${build} -->
    <javac srcdir="${test}" destdir="${build}" debug="on" debuglevel="lines,vars,source"  includeantruntime="false">
      <classpath refid="classpath.test" />
    </javac>
  </target>

  <target name="test" depends="compile-tests">
    <junit>
      <classpath refid="classpath.test" />
      <formatter type="brief" usefile="false" />
      <test name="com.scribd.resource.ScribdUserTest" />
      <test name="com.scribd.resource.ScribdDocumentTest" />
      <test name="com.scribd.resource.ScribdCollectionTest" />
    </junit>
  </target>

  <target name="dist" depends="compile" description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib" />

    <!-- Put everything in ${build} into the jscribd-${DSTAMP}.jar file -->
    <jar jarfile="${distjar}" basedir="${build}" index="true"/>
  </target>

  <target name="javadoc" depends="init" description="Create JavaDoc">
    <javadoc sourcepath="${src}" destdir="${doc}">
       <classpath refid="classpath.base" />
    </javadoc>
    <jar jarfile="${docjar}" basedir="${doc}" />
    <jar jarfile="${srcjar}" basedir="${src}" includes="**/*.java"/>
  </target>

  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}" />
    <delete dir="${dist}" />
    <delete dir="${doc}" />
  </target>

  <target name="artifact" depends="maven_init, dist, javadoc">

	  <property name="artifact-dir" location="${dist}/mvn/${maven.project.groupId}/${maven.project.artifactId}/${maven.project.version}"/>
          <mkdir dir="${artifact-dir}" />
	  <property name="artifact-base" location="${artifact-dir}/${maven.project.artifactId}-${maven.project.version}"/>
          <artifact:writepom pomRefId="maven.project" file="${artifact-base}.pom"/>
          <!-- While not strictly necessary, it's nice to maintain the Maven repo format and it
               makes manual uploading to Central easier -->
	  <copy file="${distjar}" tofile="${artifact-base}.jar"/> 
	  <copy file="${docjar}" tofile="${artifact-base}-javadoc.jar"/> 
	  <copy file="${srcjar}" tofile="${artifact-base}-sources.jar"/> 

  </target>

  <target name="artifact-install" depends="artifact">
	  <artifact:install file="${artifact-base}.jar">
	    <pom refid="maven.project"/>
            <attach file="${artifact-base}-javadoc.jar" type="jar" classifier="javadoc"/>
            <attach file="${artifact-base}-sources.jar" type="jar" classifier="sources"/>
	  </artifact:install>
  </target>

</project>
